name: Build and Test

on:
  push:
    branches:
      - master
      - staging
      - trying

jobs:
  test:
    name: Build and Test

    strategy:
      matrix:
        go: [1.14, 1.15]
        target:
          #- id: 'linux-amd64'
          #  os: 'ubuntu-18.04'

          #- id: 'linux-aarch64'
          #  os: ['self-hosted', 'linux', 'ARM64']

          #- id: 'darwin-amd64'
          #  os: 'macos-latest'

          - id: 'windows-amd64'
            os: 'windows-latest'

          #- id: 'linux-amd64'
          #  os: 'ubuntu-18.04'
          #  libwasmer_archive_name: 'wasmer-linux-amd64.tar.gz'
      fail-fast: true

    runs-on: ${{ matrix.target.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      #- name: Set up Rust
      #  uses: actions-rs/toolchain@v1
      #  with:
      #    toolchain: stable
      #    override: true
      #    default: false

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      #- name: Set up just
      #  run: |
      #    export PATH="$HOME/.cargo/bin:$PATH"
      #    cargo install just

      - name: Ready msys2
        #if: matrix.id == 'windows-amd64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain
          path-type: inherit

      - name: Run all the tests (default)
        #if: matrix.id == 'windows-amd64'
        shell: msys2 {0}
        run: |
          cd wasmer
          CC=mingw-gcc go test -v
          #just test

      #- name: Run all the tests (with custom Wasmer runtime)
      #  if: matrix.target.libwasmer_archive_name
      #  shell: bash
      #  run: |
      #    libwasmer_url=$(curl -s https://api.github.com/repos/wasmerio/wasmer-nightly/releases/latest | jq --raw-output '.assets[] | select(.name == "${{ matrix.target.libwasmer_archive_name }}") | .browser_download_url')
      #    mkdir -p libwasmer
      #    curl -L $libwasmer_url > release.tar.gz
      #    tar xzvf release.tar.gz -C libwasmer
      #    export CGO_CFLAGS="-I$(pwd)/libwasmer/include/"
      #    export CGO_LDFLAGS="-Wl,-rpath,$(pwd)/libwasmer/lib/ -L$(pwd)/libwasmer/lib/ -lwasmer"
      #    just test -tags custom_wasmer_runtime

      #- name: Run all the examples
      #  run: |
      #    just examples

# Skipped for now because of Github banning the API request from actions.
# You can find more info in this PR: https://github.com/wasmerio/wasmer-go/pull/118#issuecomment-588487544
#       - name: Test bazel build
#         shell: bash
#         run: |
#           export GOOS=$(go env GOHOSTOS)
#           curl -LO "https://github.com/bazelbuild/bazelisk/releases/download/v1.2.1/bazelisk-${GOOS}-amd64"
#           mkdir -p "${GITHUB_WORKSPACE}/bin/"
#           mv "bazelisk-${GOOS}-amd64" "${GITHUB_WORKSPACE}/bin/bazel"
#           chmod +x "${GITHUB_WORKSPACE}/bin/bazel"
#           "${GITHUB_WORKSPACE}/bin/bazel" build //...
